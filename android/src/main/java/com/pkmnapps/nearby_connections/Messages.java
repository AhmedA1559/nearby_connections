// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pkmnapps.nearby_connections;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConnectionInfoMessage {
    private @NonNull String endpointId;
    public @NonNull String getEndpointId() { return endpointId; }
    public void setEndpointId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpointId\" is null.");
      }
      this.endpointId = setterArg;
    }

    private @NonNull String endpointName;
    public @NonNull String getEndpointName() { return endpointName; }
    public void setEndpointName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpointName\" is null.");
      }
      this.endpointName = setterArg;
    }

    private @NonNull String authenticationToken;
    public @NonNull String getAuthenticationToken() { return authenticationToken; }
    public void setAuthenticationToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authenticationToken\" is null.");
      }
      this.authenticationToken = setterArg;
    }

    private @NonNull Boolean isIncomingConnection;
    public @NonNull Boolean getIsIncomingConnection() { return isIncomingConnection; }
    public void setIsIncomingConnection(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isIncomingConnection\" is null.");
      }
      this.isIncomingConnection = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ConnectionInfoMessage() {}
    public static final class Builder {
      private @Nullable String endpointId;
      public @NonNull Builder setEndpointId(@NonNull String setterArg) {
        this.endpointId = setterArg;
        return this;
      }
      private @Nullable String endpointName;
      public @NonNull Builder setEndpointName(@NonNull String setterArg) {
        this.endpointName = setterArg;
        return this;
      }
      private @Nullable String authenticationToken;
      public @NonNull Builder setAuthenticationToken(@NonNull String setterArg) {
        this.authenticationToken = setterArg;
        return this;
      }
      private @Nullable Boolean isIncomingConnection;
      public @NonNull Builder setIsIncomingConnection(@NonNull Boolean setterArg) {
        this.isIncomingConnection = setterArg;
        return this;
      }
      public @NonNull ConnectionInfoMessage build() {
        ConnectionInfoMessage pigeonReturn = new ConnectionInfoMessage();
        pigeonReturn.setEndpointId(endpointId);
        pigeonReturn.setEndpointName(endpointName);
        pigeonReturn.setAuthenticationToken(authenticationToken);
        pigeonReturn.setIsIncomingConnection(isIncomingConnection);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("endpointId", endpointId);
      toMapResult.put("endpointName", endpointName);
      toMapResult.put("authenticationToken", authenticationToken);
      toMapResult.put("isIncomingConnection", isIncomingConnection);
      return toMapResult;
    }
    static @NonNull ConnectionInfoMessage fromMap(@NonNull Map<String, Object> map) {
      ConnectionInfoMessage pigeonResult = new ConnectionInfoMessage();
      Object endpointId = map.get("endpointId");
      pigeonResult.setEndpointId((String)endpointId);
      Object endpointName = map.get("endpointName");
      pigeonResult.setEndpointName((String)endpointName);
      Object authenticationToken = map.get("authenticationToken");
      pigeonResult.setAuthenticationToken((String)authenticationToken);
      Object isIncomingConnection = map.get("isIncomingConnection");
      pigeonResult.setIsIncomingConnection((Boolean)isIncomingConnection);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdentifierMessage {
    private @NonNull String userNickname;
    public @NonNull String getUserNickname() { return userNickname; }
    public void setUserNickname(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userNickname\" is null.");
      }
      this.userNickname = setterArg;
    }

    private @NonNull Long strategy;
    public @NonNull Long getStrategy() { return strategy; }
    public void setStrategy(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"strategy\" is null.");
      }
      this.strategy = setterArg;
    }

    private @NonNull String serviceId;
    public @NonNull String getServiceId() { return serviceId; }
    public void setServiceId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"serviceId\" is null.");
      }
      this.serviceId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IdentifierMessage() {}
    public static final class Builder {
      private @Nullable String userNickname;
      public @NonNull Builder setUserNickname(@NonNull String setterArg) {
        this.userNickname = setterArg;
        return this;
      }
      private @Nullable Long strategy;
      public @NonNull Builder setStrategy(@NonNull Long setterArg) {
        this.strategy = setterArg;
        return this;
      }
      private @Nullable String serviceId;
      public @NonNull Builder setServiceId(@NonNull String setterArg) {
        this.serviceId = setterArg;
        return this;
      }
      public @NonNull IdentifierMessage build() {
        IdentifierMessage pigeonReturn = new IdentifierMessage();
        pigeonReturn.setUserNickname(userNickname);
        pigeonReturn.setStrategy(strategy);
        pigeonReturn.setServiceId(serviceId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("userNickname", userNickname);
      toMapResult.put("strategy", strategy);
      toMapResult.put("serviceId", serviceId);
      return toMapResult;
    }
    static @NonNull IdentifierMessage fromMap(@NonNull Map<String, Object> map) {
      IdentifierMessage pigeonResult = new IdentifierMessage();
      Object userNickname = map.get("userNickname");
      pigeonResult.setUserNickname((String)userNickname);
      Object strategy = map.get("strategy");
      pigeonResult.setStrategy((strategy == null) ? null : ((strategy instanceof Integer) ? (Integer)strategy : (Long)strategy));
      Object serviceId = map.get("serviceId");
      pigeonResult.setServiceId((String)serviceId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayloadMessage {
    private @NonNull String endpointId;
    public @NonNull String getEndpointId() { return endpointId; }
    public void setEndpointId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpointId\" is null.");
      }
      this.endpointId = setterArg;
    }

    private @NonNull Long type;
    public @NonNull Long getType() { return type; }
    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable byte[] bytes;
    public @Nullable byte[] getBytes() { return bytes; }
    public void setBytes(@Nullable byte[] setterArg) {
      this.bytes = setterArg;
    }

    private @NonNull Long payloadId;
    public @NonNull Long getPayloadId() { return payloadId; }
    public void setPayloadId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payloadId\" is null.");
      }
      this.payloadId = setterArg;
    }

    private @Nullable String filePath;
    public @Nullable String getFilePath() { return filePath; }
    public void setFilePath(@Nullable String setterArg) {
      this.filePath = setterArg;
    }

    private @Nullable String uri;
    public @Nullable String getUri() { return uri; }
    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PayloadMessage() {}
    public static final class Builder {
      private @Nullable String endpointId;
      public @NonNull Builder setEndpointId(@NonNull String setterArg) {
        this.endpointId = setterArg;
        return this;
      }
      private @Nullable Long type;
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable byte[] bytes;
      public @NonNull Builder setBytes(@Nullable byte[] setterArg) {
        this.bytes = setterArg;
        return this;
      }
      private @Nullable Long payloadId;
      public @NonNull Builder setPayloadId(@NonNull Long setterArg) {
        this.payloadId = setterArg;
        return this;
      }
      private @Nullable String filePath;
      public @NonNull Builder setFilePath(@Nullable String setterArg) {
        this.filePath = setterArg;
        return this;
      }
      private @Nullable String uri;
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }
      public @NonNull PayloadMessage build() {
        PayloadMessage pigeonReturn = new PayloadMessage();
        pigeonReturn.setEndpointId(endpointId);
        pigeonReturn.setType(type);
        pigeonReturn.setBytes(bytes);
        pigeonReturn.setPayloadId(payloadId);
        pigeonReturn.setFilePath(filePath);
        pigeonReturn.setUri(uri);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("endpointId", endpointId);
      toMapResult.put("type", type);
      toMapResult.put("bytes", bytes);
      toMapResult.put("payloadId", payloadId);
      toMapResult.put("filePath", filePath);
      toMapResult.put("uri", uri);
      return toMapResult;
    }
    static @NonNull PayloadMessage fromMap(@NonNull Map<String, Object> map) {
      PayloadMessage pigeonResult = new PayloadMessage();
      Object endpointId = map.get("endpointId");
      pigeonResult.setEndpointId((String)endpointId);
      Object type = map.get("type");
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type));
      Object bytes = map.get("bytes");
      pigeonResult.setBytes((byte[])bytes);
      Object payloadId = map.get("payloadId");
      pigeonResult.setPayloadId((payloadId == null) ? null : ((payloadId instanceof Integer) ? (Integer)payloadId : (Long)payloadId));
      Object filePath = map.get("filePath");
      pigeonResult.setFilePath((String)filePath);
      Object uri = map.get("uri");
      pigeonResult.setUri((String)uri);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayloadTransferUpdateMessage {
    private @NonNull String endpointId;
    public @NonNull String getEndpointId() { return endpointId; }
    public void setEndpointId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpointId\" is null.");
      }
      this.endpointId = setterArg;
    }

    private @NonNull Long payloadId;
    public @NonNull Long getPayloadId() { return payloadId; }
    public void setPayloadId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payloadId\" is null.");
      }
      this.payloadId = setterArg;
    }

    private @NonNull Long status;
    public @NonNull Long getStatus() { return status; }
    public void setStatus(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"status\" is null.");
      }
      this.status = setterArg;
    }

    private @NonNull Long bytesTransferred;
    public @NonNull Long getBytesTransferred() { return bytesTransferred; }
    public void setBytesTransferred(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bytesTransferred\" is null.");
      }
      this.bytesTransferred = setterArg;
    }

    private @NonNull Long totalBytes;
    public @NonNull Long getTotalBytes() { return totalBytes; }
    public void setTotalBytes(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"totalBytes\" is null.");
      }
      this.totalBytes = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PayloadTransferUpdateMessage() {}
    public static final class Builder {
      private @Nullable String endpointId;
      public @NonNull Builder setEndpointId(@NonNull String setterArg) {
        this.endpointId = setterArg;
        return this;
      }
      private @Nullable Long payloadId;
      public @NonNull Builder setPayloadId(@NonNull Long setterArg) {
        this.payloadId = setterArg;
        return this;
      }
      private @Nullable Long status;
      public @NonNull Builder setStatus(@NonNull Long setterArg) {
        this.status = setterArg;
        return this;
      }
      private @Nullable Long bytesTransferred;
      public @NonNull Builder setBytesTransferred(@NonNull Long setterArg) {
        this.bytesTransferred = setterArg;
        return this;
      }
      private @Nullable Long totalBytes;
      public @NonNull Builder setTotalBytes(@NonNull Long setterArg) {
        this.totalBytes = setterArg;
        return this;
      }
      public @NonNull PayloadTransferUpdateMessage build() {
        PayloadTransferUpdateMessage pigeonReturn = new PayloadTransferUpdateMessage();
        pigeonReturn.setEndpointId(endpointId);
        pigeonReturn.setPayloadId(payloadId);
        pigeonReturn.setStatus(status);
        pigeonReturn.setBytesTransferred(bytesTransferred);
        pigeonReturn.setTotalBytes(totalBytes);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("endpointId", endpointId);
      toMapResult.put("payloadId", payloadId);
      toMapResult.put("status", status);
      toMapResult.put("bytesTransferred", bytesTransferred);
      toMapResult.put("totalBytes", totalBytes);
      return toMapResult;
    }
    static @NonNull PayloadTransferUpdateMessage fromMap(@NonNull Map<String, Object> map) {
      PayloadTransferUpdateMessage pigeonResult = new PayloadTransferUpdateMessage();
      Object endpointId = map.get("endpointId");
      pigeonResult.setEndpointId((String)endpointId);
      Object payloadId = map.get("payloadId");
      pigeonResult.setPayloadId((payloadId == null) ? null : ((payloadId instanceof Integer) ? (Integer)payloadId : (Long)payloadId));
      Object status = map.get("status");
      pigeonResult.setStatus((status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status));
      Object bytesTransferred = map.get("bytesTransferred");
      pigeonResult.setBytesTransferred((bytesTransferred == null) ? null : ((bytesTransferred instanceof Integer) ? (Integer)bytesTransferred : (Long)bytesTransferred));
      Object totalBytes = map.get("totalBytes");
      pigeonResult.setTotalBytes((totalBytes == null) ? null : ((totalBytes instanceof Integer) ? (Integer)totalBytes : (Long)totalBytes));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class NearbyApiCodec extends StandardMessageCodec {
    public static final NearbyApiCodec INSTANCE = new NearbyApiCodec();
    private NearbyApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return IdentifierMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof IdentifierMessage) {
        stream.write(128);
        writeValue(stream, ((IdentifierMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NearbyApi {
    void checkLocationPermission(Result<Boolean> result);
    void askLocationPermission(Result<Boolean> result);
    void checkExternalStoragePermission(Result<Boolean> result);
    void checkBluetoothPermission(Result<Boolean> result);
    void checkLocationEnabled(Result<Boolean> result);
    void enableLocationServices(Result<Boolean> result);
    void askExternalStoragePermission();
    void askBluetoothPermission();
    void askLocationAndExternalStoragePermission();
    void copyFileAndDeleteOriginal(@NonNull String sourceUri, @NonNull String destinationFilepath, Result<Boolean> result);
    void startAdvertising(@NonNull IdentifierMessage identifierMessage, Result<Boolean> result);
    void stopAdvertising(Result<Void> result);
    void startDiscovery(@NonNull IdentifierMessage identifierMessage, Result<Boolean> result);
    void stopDiscovery(Result<Void> result);
    void stopAllEndpoints(Result<Void> result);
    void disconnectFromEndpoint(Result<Void> result);
    void requestConnection(@NonNull String userNickName, @NonNull String endpointId, Result<Boolean> result);
    void acceptConnection(@NonNull String endpointId, Result<Boolean> result);
    void rejectConnection(@NonNull String endpointId, Result<Boolean> result);
    void sendBytesPayload(@NonNull String endpointId, @NonNull byte[] bytes, Result<Void> result);
    void sendFilePayload(@NonNull String endpointId, @NonNull String filePath, Result<Long> result);
    void cancelPayload(@NonNull Long payloadId, Result<Void> result);

    /** The codec used by NearbyApi. */
    static MessageCodec<Object> getCodec() {
      return NearbyApiCodec.INSTANCE;
    }

    /** Sets up an instance of `NearbyApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NearbyApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.checkLocationPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkLocationPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.askLocationPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.askLocationPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.checkExternalStoragePermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkExternalStoragePermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.checkBluetoothPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkBluetoothPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.checkLocationEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkLocationEnabled(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.enableLocationServices", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.enableLocationServices(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.askExternalStoragePermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.askExternalStoragePermission();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.askBluetoothPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.askBluetoothPermission();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.askLocationAndExternalStoragePermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.askLocationAndExternalStoragePermission();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.copyFileAndDeleteOriginal", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceUriArg = (String)args.get(0);
              if (sourceUriArg == null) {
                throw new NullPointerException("sourceUriArg unexpectedly null.");
              }
              String destinationFilepathArg = (String)args.get(1);
              if (destinationFilepathArg == null) {
                throw new NullPointerException("destinationFilepathArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.copyFileAndDeleteOriginal(sourceUriArg, destinationFilepathArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.startAdvertising", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              IdentifierMessage identifierMessageArg = (IdentifierMessage)args.get(0);
              if (identifierMessageArg == null) {
                throw new NullPointerException("identifierMessageArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startAdvertising(identifierMessageArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.stopAdvertising", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.stopAdvertising(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.startDiscovery", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              IdentifierMessage identifierMessageArg = (IdentifierMessage)args.get(0);
              if (identifierMessageArg == null) {
                throw new NullPointerException("identifierMessageArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startDiscovery(identifierMessageArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.stopDiscovery", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.stopDiscovery(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.stopAllEndpoints", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.stopAllEndpoints(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.disconnectFromEndpoint", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.disconnectFromEndpoint(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.requestConnection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String userNickNameArg = (String)args.get(0);
              if (userNickNameArg == null) {
                throw new NullPointerException("userNickNameArg unexpectedly null.");
              }
              String endpointIdArg = (String)args.get(1);
              if (endpointIdArg == null) {
                throw new NullPointerException("endpointIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestConnection(userNickNameArg, endpointIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.acceptConnection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String endpointIdArg = (String)args.get(0);
              if (endpointIdArg == null) {
                throw new NullPointerException("endpointIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.acceptConnection(endpointIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.rejectConnection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String endpointIdArg = (String)args.get(0);
              if (endpointIdArg == null) {
                throw new NullPointerException("endpointIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.rejectConnection(endpointIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.sendBytesPayload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String endpointIdArg = (String)args.get(0);
              if (endpointIdArg == null) {
                throw new NullPointerException("endpointIdArg unexpectedly null.");
              }
              byte[] bytesArg = (byte[])args.get(1);
              if (bytesArg == null) {
                throw new NullPointerException("bytesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendBytesPayload(endpointIdArg, bytesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.sendFilePayload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String endpointIdArg = (String)args.get(0);
              if (endpointIdArg == null) {
                throw new NullPointerException("endpointIdArg unexpectedly null.");
              }
              String filePathArg = (String)args.get(1);
              if (filePathArg == null) {
                throw new NullPointerException("filePathArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendFilePayload(endpointIdArg, filePathArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NearbyApi.cancelPayload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number payloadIdArg = (Number)args.get(0);
              if (payloadIdArg == null) {
                throw new NullPointerException("payloadIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.cancelPayload((payloadIdArg == null) ? null : payloadIdArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DiscoveryConnectionLifecycleApiCodec extends StandardMessageCodec {
    public static final DiscoveryConnectionLifecycleApiCodec INSTANCE = new DiscoveryConnectionLifecycleApiCodec();
    private DiscoveryConnectionLifecycleApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConnectionInfoMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConnectionInfoMessage) {
        stream.write(128);
        writeValue(stream, ((ConnectionInfoMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class DiscoveryConnectionLifecycleApi {
    private final BinaryMessenger binaryMessenger;
    public DiscoveryConnectionLifecycleApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return DiscoveryConnectionLifecycleApiCodec.INSTANCE;
    }

    public void onConnectionInitiated(@NonNull ConnectionInfoMessage connectionInfoMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionInitiated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(connectionInfoMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onConnectionResult(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionResult", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onDisconnected(@NonNull String endpointIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onDisconnected", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class AdvertisingConnectionLifecycleApiCodec extends StandardMessageCodec {
    public static final AdvertisingConnectionLifecycleApiCodec INSTANCE = new AdvertisingConnectionLifecycleApiCodec();
    private AdvertisingConnectionLifecycleApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConnectionInfoMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConnectionInfoMessage) {
        stream.write(128);
        writeValue(stream, ((ConnectionInfoMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AdvertisingConnectionLifecycleApi {
    private final BinaryMessenger binaryMessenger;
    public AdvertisingConnectionLifecycleApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return AdvertisingConnectionLifecycleApiCodec.INSTANCE;
    }

    public void onConnectionInitiated(@NonNull ConnectionInfoMessage connectionInfoMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionInitiated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(connectionInfoMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onConnectionResult(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionResult", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onDisconnected(@NonNull String endpointIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onDisconnected", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class PayloadApiCodec extends StandardMessageCodec {
    public static final PayloadApiCodec INSTANCE = new PayloadApiCodec();
    private PayloadApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PayloadMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PayloadTransferUpdateMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PayloadMessage) {
        stream.write(128);
        writeValue(stream, ((PayloadMessage) value).toMap());
      } else 
      if (value instanceof PayloadTransferUpdateMessage) {
        stream.write(129);
        writeValue(stream, ((PayloadTransferUpdateMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PayloadApi {
    private final BinaryMessenger binaryMessenger;
    public PayloadApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PayloadApiCodec.INSTANCE;
    }

    public void onPayloadReceived(@NonNull String endpointIdArg, @NonNull PayloadMessage payloadMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PayloadApi.onPayloadReceived", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg, payloadMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onPayloadTransferUpdate(@NonNull String endpointIdArg, @NonNull PayloadTransferUpdateMessage payloadTransferUpdateMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PayloadApi.onPayloadTransferUpdate", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg, payloadTransferUpdateMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class EndpointDiscoveryApiCodec extends StandardMessageCodec {
    public static final EndpointDiscoveryApiCodec INSTANCE = new EndpointDiscoveryApiCodec();
    private EndpointDiscoveryApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class EndpointDiscoveryApi {
    private final BinaryMessenger binaryMessenger;
    public EndpointDiscoveryApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return EndpointDiscoveryApiCodec.INSTANCE;
    }

    public void onEndpointFound(@NonNull String endpointIdArg, @NonNull String endpointNameArg, @NonNull String serviceIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg, endpointNameArg, serviceIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onEndpointLost(@NonNull String endpointIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointLost", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(endpointIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
