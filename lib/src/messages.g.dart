// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class ConnectionInfoMessage {
  ConnectionInfoMessage({
    required this.endpointId,
    required this.endpointName,
    required this.authenticationToken,
    required this.isIncomingConnection,
  });

  String endpointId;
  String endpointName;
  String authenticationToken;
  bool isIncomingConnection;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['endpointId'] = endpointId;
    pigeonMap['endpointName'] = endpointName;
    pigeonMap['authenticationToken'] = authenticationToken;
    pigeonMap['isIncomingConnection'] = isIncomingConnection;
    return pigeonMap;
  }

  static ConnectionInfoMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ConnectionInfoMessage(
      endpointId: pigeonMap['endpointId']! as String,
      endpointName: pigeonMap['endpointName']! as String,
      authenticationToken: pigeonMap['authenticationToken']! as String,
      isIncomingConnection: pigeonMap['isIncomingConnection']! as bool,
    );
  }
}

class IdentifierMessage {
  IdentifierMessage({
    required this.userNickname,
    required this.strategy,
    required this.serviceId,
  });

  String userNickname;
  int strategy;
  String serviceId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['userNickname'] = userNickname;
    pigeonMap['strategy'] = strategy;
    pigeonMap['serviceId'] = serviceId;
    return pigeonMap;
  }

  static IdentifierMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return IdentifierMessage(
      userNickname: pigeonMap['userNickname']! as String,
      strategy: pigeonMap['strategy']! as int,
      serviceId: pigeonMap['serviceId']! as String,
    );
  }
}

class PayloadMessage {
  PayloadMessage({
    required this.endpointId,
    required this.type,
    this.bytes,
    required this.payloadId,
    this.filePath,
    this.uri,
  });

  String endpointId;
  int type;
  Uint8List? bytes;
  int payloadId;
  String? filePath;
  String? uri;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['endpointId'] = endpointId;
    pigeonMap['type'] = type;
    pigeonMap['bytes'] = bytes;
    pigeonMap['payloadId'] = payloadId;
    pigeonMap['filePath'] = filePath;
    pigeonMap['uri'] = uri;
    return pigeonMap;
  }

  static PayloadMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PayloadMessage(
      endpointId: pigeonMap['endpointId']! as String,
      type: pigeonMap['type']! as int,
      bytes: pigeonMap['bytes'] as Uint8List?,
      payloadId: pigeonMap['payloadId']! as int,
      filePath: pigeonMap['filePath'] as String?,
      uri: pigeonMap['uri'] as String?,
    );
  }
}

class PayloadTransferUpdateMessage {
  PayloadTransferUpdateMessage({
    required this.endpointId,
    required this.payloadId,
    required this.status,
    required this.bytesTransferred,
    required this.totalBytes,
  });

  String endpointId;
  int payloadId;
  int status;
  int bytesTransferred;
  int totalBytes;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['endpointId'] = endpointId;
    pigeonMap['payloadId'] = payloadId;
    pigeonMap['status'] = status;
    pigeonMap['bytesTransferred'] = bytesTransferred;
    pigeonMap['totalBytes'] = totalBytes;
    return pigeonMap;
  }

  static PayloadTransferUpdateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PayloadTransferUpdateMessage(
      endpointId: pigeonMap['endpointId']! as String,
      payloadId: pigeonMap['payloadId']! as int,
      status: pigeonMap['status']! as int,
      bytesTransferred: pigeonMap['bytesTransferred']! as int,
      totalBytes: pigeonMap['totalBytes']! as int,
    );
  }
}

class _NearbyApiCodec extends StandardMessageCodec {
  const _NearbyApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is IdentifierMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return IdentifierMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class NearbyApi {
  /// Constructor for [NearbyApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NearbyApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NearbyApiCodec();

  Future<bool> checkLocationPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.checkLocationPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> askLocationPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.askLocationPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> checkExternalStoragePermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.checkExternalStoragePermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> checkBluetoothPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.checkBluetoothPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> checkLocationEnabled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.checkLocationEnabled', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> enableLocationServices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.enableLocationServices', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> askExternalStoragePermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.askExternalStoragePermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> askBluetoothPermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.askBluetoothPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> askLocationAndExternalStoragePermission() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.askLocationAndExternalStoragePermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<bool> copyFileAndDeleteOriginal(String arg_sourceUri, String arg_destinationFilepath) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.copyFileAndDeleteOriginal', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_sourceUri, arg_destinationFilepath]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> startAdvertising(IdentifierMessage arg_identifierMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.startAdvertising', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_identifierMessage]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> stopAdvertising() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.stopAdvertising', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<bool> startDiscovery(IdentifierMessage arg_identifierMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.startDiscovery', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_identifierMessage]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> stopDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.stopDiscovery', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> stopAllEndpoints() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.stopAllEndpoints', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> disconnectFromEndpoint(String arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.disconnectFromEndpoint', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_endpointId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<bool> requestConnection(String arg_userNickName, String arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.requestConnection', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_userNickName, arg_endpointId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> acceptConnection(String arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.acceptConnection', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_endpointId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> rejectConnection(String arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.rejectConnection', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_endpointId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> sendPayload(String arg_endpointId, Uint8List arg_bytes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.sendPayload', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_endpointId, arg_bytes]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<int> sendFilePayload(String arg_endpointId, String arg_filePath) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.sendFilePayload', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_endpointId, arg_filePath]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<void> cancelPayload(int arg_payloadId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NearbyApi.cancelPayload', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_payloadId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _DiscoveryConnectionLifecycleApiCodec extends StandardMessageCodec {
  const _DiscoveryConnectionLifecycleApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectionInfoMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ConnectionInfoMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class DiscoveryConnectionLifecycleApi {
  static const MessageCodec<Object?> codec = _DiscoveryConnectionLifecycleApiCodec();

  void onConnectionInitiated(ConnectionInfoMessage connectionInfoMessage);
  void onConnectionResult(String endpointId, int statusCode);
  void onDisconnected(String endpointId);
  static void setup(DiscoveryConnectionLifecycleApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionInitiated', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionInitiated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectionInfoMessage? arg_connectionInfoMessage = (args[0] as ConnectionInfoMessage?);
          assert(arg_connectionInfoMessage != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionInitiated was null, expected non-null ConnectionInfoMessage.');
          api.onConnectionInitiated(arg_connectionInfoMessage!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionResult', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionResult was null, expected non-null String.');
          final int? arg_statusCode = (args[1] as int?);
          assert(arg_statusCode != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onConnectionResult was null, expected non-null int.');
          api.onConnectionResult(arg_endpointId!, arg_statusCode!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onDisconnected', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.DiscoveryConnectionLifecycleApi.onDisconnected was null, expected non-null String.');
          api.onDisconnected(arg_endpointId!);
          return;
        });
      }
    }
  }
}

class _AdvertisingConnectionLifecycleApiCodec extends StandardMessageCodec {
  const _AdvertisingConnectionLifecycleApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectionInfoMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ConnectionInfoMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class AdvertisingConnectionLifecycleApi {
  static const MessageCodec<Object?> codec = _AdvertisingConnectionLifecycleApiCodec();

  void onConnectionInitiated(ConnectionInfoMessage connectionInfoMessage);
  void onConnectionResult(String endpointId, int statusCode);
  void onDisconnected(String endpointId);
  static void setup(AdvertisingConnectionLifecycleApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionInitiated', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionInitiated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectionInfoMessage? arg_connectionInfoMessage = (args[0] as ConnectionInfoMessage?);
          assert(arg_connectionInfoMessage != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionInitiated was null, expected non-null ConnectionInfoMessage.');
          api.onConnectionInitiated(arg_connectionInfoMessage!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionResult', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionResult was null, expected non-null String.');
          final int? arg_statusCode = (args[1] as int?);
          assert(arg_statusCode != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onConnectionResult was null, expected non-null int.');
          api.onConnectionResult(arg_endpointId!, arg_statusCode!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onDisconnected', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.AdvertisingConnectionLifecycleApi.onDisconnected was null, expected non-null String.');
          api.onDisconnected(arg_endpointId!);
          return;
        });
      }
    }
  }
}

class _PayloadApiCodec extends StandardMessageCodec {
  const _PayloadApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PayloadMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is PayloadTransferUpdateMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return PayloadMessage.decode(readValue(buffer)!);
      
      case 129:       
        return PayloadTransferUpdateMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class PayloadApi {
  static const MessageCodec<Object?> codec = _PayloadApiCodec();

  void onPayloadReceived(String endpointId, PayloadMessage payloadMessage);
  void onPayloadTransferUpdate(String endpointId, PayloadTransferUpdateMessage payloadTransferUpdateMessage);
  static void setup(PayloadApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PayloadApi.onPayloadReceived', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadReceived was null, expected non-null String.');
          final PayloadMessage? arg_payloadMessage = (args[1] as PayloadMessage?);
          assert(arg_payloadMessage != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadReceived was null, expected non-null PayloadMessage.');
          api.onPayloadReceived(arg_endpointId!, arg_payloadMessage!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PayloadApi.onPayloadTransferUpdate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadTransferUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadTransferUpdate was null, expected non-null String.');
          final PayloadTransferUpdateMessage? arg_payloadTransferUpdateMessage = (args[1] as PayloadTransferUpdateMessage?);
          assert(arg_payloadTransferUpdateMessage != null, 'Argument for dev.flutter.pigeon.PayloadApi.onPayloadTransferUpdate was null, expected non-null PayloadTransferUpdateMessage.');
          api.onPayloadTransferUpdate(arg_endpointId!, arg_payloadTransferUpdateMessage!);
          return;
        });
      }
    }
  }
}

class _EndpointDiscoveryApiCodec extends StandardMessageCodec {
  const _EndpointDiscoveryApiCodec();
}
abstract class EndpointDiscoveryApi {
  static const MessageCodec<Object?> codec = _EndpointDiscoveryApiCodec();

  void onEndpointFound(String endpointId, String endpointName, String serviceId);
  void onEndpointLost(String endpointId);
  static void setup(EndpointDiscoveryApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound was null, expected non-null String.');
          final String? arg_endpointName = (args[1] as String?);
          assert(arg_endpointName != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound was null, expected non-null String.');
          final String? arg_serviceId = (args[2] as String?);
          assert(arg_serviceId != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointFound was null, expected non-null String.');
          api.onEndpointFound(arg_endpointId!, arg_endpointName!, arg_serviceId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointLost', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointLost was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_endpointId = (args[0] as String?);
          assert(arg_endpointId != null, 'Argument for dev.flutter.pigeon.EndpointDiscoveryApi.onEndpointLost was null, expected non-null String.');
          api.onEndpointLost(arg_endpointId!);
          return;
        });
      }
    }
  }
}
